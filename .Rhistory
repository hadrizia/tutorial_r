View(df)
# ESTE SCRIPT TEM COMO OBJETIVO UNIR TODAS AS TABELAS POR ANO
library(functional)
library(plyr)
library(tidyverse)
source(here::here("r_scripts/utils/filters.R"))
source(here::here("r_scripts/utils/constants.R"))
# Caminho para repositório
#setwd('~/nao2/')
del_cols <- function(df) {
df %>% select(-c(data_geracao, hora_geracao, sigla_ue,
sq_candidato, cod_sit_cand_superior,
cod_sit_cand_superior, sequencial_legenda,
composicao_legenda, nome_coligacao,
nome_partido, codigo_municipio))
}
summarise_votos <- function(df) {
df %>%
group_by(ano_eleicao, sigla_uf, nome_municipio,
numero_cand) %>%
summarise(total_votos = sum(tot_votos))
}
preprocess_resultados <- function(df) {
df %>%
filter_not_segundo_turno() %>%
del_cols %>%
summarise_votos
}
# Recupera os nomes das colunas correspondentes ao ano
get_resultado_columns <- function(ano) {
if (ano <= 2012) {
column_names <- col_names_candidatos_munzona_ate_2012
} else {
column_names <- col_names_candidatos_munzona_2014_em_diante
}
}
# Retorna um dataframe único para os resultados das votações em um ano
get_resultados_por_ano <- function(ano = 2012) {
# Nome de todos os arquivos necessários
filenames <- list.files(paste0("data/candidatos/", ano), pattern="votacao_candidato_munzona_*", full.names=TRUE)
# Lendo todos os arquivos e sumarizando em um único arquivo
read_latin <- Curry(read_delim, delim = ";", col_names=FALSE, local = locale("br", encoding = "latin1"))
ldf <- lapply(filenames, read_latin)
df <- ldply(ldf, data.frame)
# Renomeia as colunas do dataframe
names(df) <- get_resultado_columns(ano)
return(df)
}
# Preprocessa e salva o dataframe recuperado na função get_resultados_por_ano()
preprocess_resultados_por_ano <- function (ano = 2012) {
df <- get_resultados_por_ano(ano)
df <- preprocess_resultados(df)
# Salva o arquivo no diretório '../data/candidatos/<ano>/resultados_<ano>.csv'
#write_csv(df, paste0(here::here("data/candidatos/"), ano, "/resultados_", ano, ".csv"))
return(df)
}
preprocess_resultados_total <- function(ano_inicial, ano_final) {
df <- do.call(rbind, lapply(seq(ano_inicial, ano_final, by=2), preprocess_resultados_por_ano))
#write_csv(df, paste0(here::here("data/candidatos/resultados_total.csv"))
return(df)
}
#df <- salva_votacao_candidatos_total(2000, 2016)
df <- preprocess_candidatos_por_ano(2000)
View(df)
View(resultados_df)
View(df)
# ESTE SCRIPT TEM COMO OBJETIVO UNIR TODAS AS TABELAS POR ANO
library(functional)
library(plyr)
library(tidyverse)
source(here::here("r_scripts/utils/filters.R"))
source(here::here("r_scripts/utils/constants.R"))
# Caminho para repositório
#setwd('~/nao2/')
del_cols <- function(df) {
df %>% select(-c(data_geracao, hora_geracao, sigla_ue,
sq_candidato, cod_sit_cand_superior,
cod_sit_cand_superior, sequencial_legenda,
composicao_legenda, nome_coligacao,
nome_partido, codigo_municipio))
}
summarise_votos <- function(df) {
df %>%
group_by(ano_eleicao, sigla_uf, nome_municipio,
numero_cand) %>%
summarise(total_votos = sum(tot_votos))
}
preprocess_resultados <- function(df) {
df %>%
filter_not_segundo_turno() %>%
del_cols %>%
summarise_votos
}
# Recupera os nomes das colunas correspondentes ao ano
get_resultado_columns <- function(ano) {
if (ano <= 2012) {
column_names <- col_names_candidatos_munzona_ate_2012
} else {
column_names <- col_names_candidatos_munzona_2014_em_diante
}
}
# Retorna um dataframe único para os resultados das votações em um ano
get_resultados_por_ano <- function(ano = 2012) {
# Nome de todos os arquivos necessários
filenames <- list.files(paste0(here::here("data/candidatos/"), ano), pattern="votacao_candidato_munzona_*", full.names=TRUE)
# Lendo todos os arquivos e sumarizando em um único arquivo
read_latin <- Curry(read_delim, delim = ";", col_names=FALSE, local = locale("br", encoding = "latin1"))
ldf <- lapply(filenames, read_latin)
df <- ldply(ldf, data.frame)
# Renomeia as colunas do dataframe
names(df) <- get_resultado_columns(ano)
return(df)
}
# Preprocessa e salva o dataframe recuperado na função get_resultados_por_ano()
preprocess_resultados_por_ano <- function (ano = 2012) {
df <- get_resultados_por_ano(ano)
df <- preprocess_resultados(df)
# Salva o arquivo no diretório '../data/candidatos/<ano>/resultados_<ano>.csv'
#write_csv(df, paste0(here::here("data/candidatos/"), ano, "/resultados_", ano, ".csv"))
return(df)
}
preprocess_resultados_total <- function(ano_inicial, ano_final) {
df <- do.call(rbind, lapply(seq(ano_inicial, ano_final, by=2), preprocess_resultados_por_ano))
#write_csv(df, paste0(here::here("data/candidatos/resultados_total.csv"))
return(df)
}
#df <- salva_votacao_candidatos_total(2000, 2016)
df <- preprocess_resultados_por_ano(2000)
ano = 2000
df <- get_resultados_por_ano(ano)
library(functional)
library(plyr)
library(tidyverse)
source(here::here("r_scripts/utils/filters.R"))
source(here::here("r_scripts/utils/constants.R"))
del_cols <- function(df) {
df %>% select(-c(data_geracao, hora_geracao, sigla_ue,
sq_candidato, cod_sit_cand_superior,
cod_sit_cand_superior, sequencial_legenda,
composicao_legenda, nome_coligacao,
nome_partido, codigo_municipio))
}
summarise_votos <- function(df) {
df %>%
group_by(ano_eleicao, sigla_uf, nome_municipio,
numero_cand) %>%
summarise(total_votos = sum(tot_votos))
}
preprocess_resultados <- function(df) {
df %>%
filter_not_segundo_turno() %>%
del_cols %>%
summarise_votos
}
# Recupera os nomes das colunas correspondentes ao ano
get_resultado_columns <- function(ano) {
if (ano <= 2012) {
column_names <- col_names_candidatos_munzona_ate_2012
} else {
column_names <- col_names_candidatos_munzona_2014_em_diante
}
}
df <- get_resultados_por_ano(ano)
View(df)
df %>%
filter_not_segundo_turno() %>%
del_cols
df <- df %>%
filter_not_segundo_turno() %>%
del_cols
View(df)
df %>% summarise(a = sum(tot_votos))
df %>% summarize(a = sum(tot_votos))
df %>% group_by(sigla_uf) %>% summarize(a = sum(tot_votos))
glipmse(df)
glimpse(df)
# ESTE SCRIPT TEM COMO OBJETIVO UNIR TODAS AS TABELAS POR ANO
library(functional)
library(plyr)
library(tidyverse)
source(here::here("r_scripts/utils/filters.R"))
source(here::here("r_scripts/utils/constants.R"))
# Caminho para repositório
#setwd('~/nao2/')
del_cols <- function(df) {
df %>% select(-c(data_geracao, hora_geracao, sigla_ue,
sq_candidato, cod_sit_cand_superior,
cod_sit_cand_superior, sequencial_legenda,
composicao_legenda, nome_coligacao,
nome_partido, codigo_municipio))
}
summarise_votos <- function(df) {
df %>%
group_by(ano_eleicao, sigla_uf, nome_municipio,
numero_cand) %>%
summarise(total_votos = sum(tot_votos))
}
preprocess_resultados <- function(df) {
df %>%
filter_not_segundo_turno() %>%
del_cols %>%
summarise_votos
}
# Recupera os nomes das colunas correspondentes ao ano
get_resultado_columns <- function(ano) {
if (ano <= 2012) {
column_names <- col_names_candidatos_munzona_ate_2012
} else {
column_names <- col_names_candidatos_munzona_2014_em_diante
}
}
# Retorna um dataframe único para os resultados das votações em um ano
get_resultados_por_ano <- function(ano = 2012) {
# Nome de todos os arquivos necessários
filenames <- list.files(paste0(here::here("data/candidatos/"), ano), pattern="votacao_candidato_munzona_*", full.names=TRUE)
# Lendo todos os arquivos e sumarizando em um único arquivo
read_latin <- Curry(read.csv, header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
ldf <- lapply(filenames, read_latin)
df <- ldply(ldf, data.frame)
# Renomeia as colunas do dataframe
names(df) <- get_resultado_columns(ano)
return(df)
}
# Preprocessa e salva o dataframe recuperado na função get_resultados_por_ano()
preprocess_resultados_por_ano <- function (ano = 2012) {
df <- get_resultados_por_ano(ano)
df <- preprocess_resultados(df)
# Salva o arquivo no diretório '../data/candidatos/<ano>/resultados_<ano>.csv'
#write_csv(df, paste0(here::here("data/candidatos/"), ano, "/resultados_", ano, ".csv"))
return(df)
}
preprocess_resultados_total <- function(ano_inicial, ano_final) {
df <- do.call(rbind, lapply(seq(ano_inicial, ano_final, by=2), preprocess_resultados_por_ano))
#write_csv(df, paste0(here::here("data/candidatos/resultados_total.csv"))
return(df)
}
#df <- salva_votacao_candidatos_total(2000, 2016)
df <- preprocess_resultados_por_ano(2000)
ano = 2000
df <- get_resultados_por_ano(ano)
# Nome de todos os arquivos necessários
filenames <- list.files(paste0(here::here("data/candidatos/"), ano), pattern="votacao_candidato_munzona_*", full.names=TRUE)
# Lendo todos os arquivos e sumarizando em um único arquivo
read_latin <- Curry(read.csv, header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
ldf <- lapply(filenames, read_latin)
# Lendo todos os arquivos e sumarizando em um único arquivo
read_latin <- Curry(read.csv2, header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
ldf <- lapply(filenames, read_latin)
df <- ldply(ldf, data.frame)
# Renomeia as colunas do dataframe
names(df) <- get_resultado_columns(ano)
df %>%
group_by(ano_eleicao, sigla_uf, nome_municipio,
numero_cand) %>%
summarise(total_votos = sum(tot_votos))
# Lendo todos os arquivos e sumarizando em um único arquivo
read_latin <- Curry(read_csv2, header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
ldf <- lapply(filenames, read_latin)
# Lendo todos os arquivos e sumarizando em um único arquivo
read_latin <- Curry(read.csv2, header=FALSE, stringsAsFactors=FALSE, fileEncoding="latin1")
ldf <- lapply(filenames, read_latin)
df <- ldply(ldf, data.frame)
df %>%
group_by(ano_eleicao, sigla_uf, nome_municipio,
numero_cand) %>%
summarise(total_votos = sum(tot_votos))
# Renomeia as colunas do dataframe
names(df) <- get_resultado_columns(ano)
df %>%
group_by(ano_eleicao, sigla_uf, nome_municipio,
numero_cand) %>%
summarise(total_votos = sum(tot_votos))
df %>%
dplyr::group_by(ano_eleicao, sigla_uf, nome_municipio,
numero_cand) %>%
dplyr::summarise(total_votos = sum(tot_votos))
df %>%
filter_not_segundo_turno() %>%
dplyr::group_by(ano_eleicao, sigla_uf, nome_municipio,
numero_cand, nome_candidato,
nome_urna_candidato,
descricao_cargo, sigla_partido,
desc_sit_cand_tot) %>%
dplyr::summarize(total_votos = sum(tot_votos))
# ESTE SCRIPT TEM COMO OBJETIVO UNIR TODAS AS TABELAS POR ANO
library(functional)
library(plyr)
library(tidyverse)
source(here::here("r_scripts/utils/filters.R"))
source(here::here("r_scripts/utils/constants.R"))
# Caminho para repositório
#setwd('~/nao2/')
del_cols <- function(df) {
df %>% select(-c(data_geracao, hora_geracao, sigla_ue,
sq_candidato, cod_sit_cand_superior,
cod_sit_cand_superior, sequencial_legenda,
composicao_legenda, nome_coligacao,
nome_partido, codigo_municipio))
}
summarise_votos <- function(df) {
df %>%
filter_not_segundo_turno() %>%
dplyr::group_by(ano_eleicao, sigla_uf, nome_municipio,
numero_cand, nome_candidato,
nome_urna_candidato,
descricao_cargo, sigla_partido,
desc_sit_cand_tot) %>%
dplyr::summarize(total_votos = sum(tot_votos))
}
preprocess_resultados <- function(df) {
df %>%
del_cols %>%
summarise_votos
}
# Recupera os nomes das colunas correspondentes ao ano
get_resultado_columns <- function(ano) {
if (ano <= 2012) {
column_names <- col_names_candidatos_munzona_ate_2012
} else {
column_names <- col_names_candidatos_munzona_2014_em_diante
}
}
# Retorna um dataframe único para os resultados das votações em um ano
get_resultados_por_ano <- function(ano = 2012) {
# Nome de todos os arquivos necessários
filenames <- list.files(paste0("data/candidatos/", ano), pattern="votacao_candidato_munzona_*", full.names=TRUE)
# Lendo todos os arquivos e sumarizando em um único arquivo
read_latin <- Curry(read_delim, delim = ";", col_names=FALSE, local = locale("br", encoding = "latin1"))
ldf <- lapply(filenames, read_latin)
df <- ldply(ldf, data.frame)
# Renomeia as colunas do dataframe
names(df) <- get_resultado_columns(ano)
return(df)
}
# Preprocessa e salva o dataframe recuperado na função get_resultados_por_ano()
preprocess_resultados_por_ano <- function (ano = 2012) {
df <- get_resultados_por_ano(ano)
df <- preprocess_resultados(df)
# Salva o arquivo no diretório '../data/candidatos/<ano>/resultados_<ano>.csv'
#write_csv(df, paste0(here::here("data/candidatos/"), ano, "/resultados_", ano, ".csv"))
return(df)
}
preprocess_resultados_total <- function(ano_inicial, ano_final) {
df <- do.call(rbind, lapply(seq(ano_inicial, ano_final, by=2), preprocess_resultados_por_ano))
#write_csv(df, paste0(here::here("data/candidatos/resultados_total.csv"))
return(df)
}
df <- preprocess_resultados_por_ano(2000)
# Salva o arquivo no diretório '../data/candidatos/<ano>/resultados_<ano>.csv'
write_csv(df, paste0(here::here("data/candidatos/"), ano, "/resultados_", ano, ".csv"))
# Preprocessa e salva o dataframe recuperado na função get_resultados_por_ano()
preprocess_resultados_por_ano <- function (ano = 2012) {
df <- get_resultados_por_ano(ano)
df <- preprocess_resultados(df)
# Salva o arquivo no diretório '../data/candidatos/<ano>/resultados_<ano>.csv'
write_csv(df, paste0(here::here("data/candidatos/"), ano, "/resultados_", ano, ".csv"))
return(df)
}
df <- preprocess_resultados_por_ano(2002)
# Author:  Hadrizia Santos, hadrizia.santos@ccc.ufcg.edu.br
# Last change: 08/2018
# ------------------------- Entrada -----------------------------
# Recebe como entrada os dados do TSE de candidatos e de votações por munzona (município e zona).
# Dados de entrada dos candidatos têm caminho ../data/candidatos/<ano>/candidatos_<ano>.csv;
# Dados de entrada das votações por munzona têm caminho ../data/candidatos/<ano>/resultados_<ano>.csv;
# O ano pertence a [2000, 2016].
# Utiliza também as constantes com os nomes das colunas declarados em /utils/constants.R
# ------------------------- Saída -------------------------------
# Produz como resultado um arquivo denominado
# ../data/preprocessed/candidatos/candidatos_auxiliar_<ano>.csv, que contém
# os dados dos candidatos e o resultado das votações de um ano, que está entre [2000,2016].
library(tidyverse)
library(data.table)
source(here::here("r_scripts/resultados/preprocessa_resultados.R"))
source(here::here("r_scripts/candidatos/preprocessa_candidatos.R"))
# Une os dados de candidatos aos de resultados de votação, adicionando o sexo e a raça dos candidatos.
join_resultados_and_candidatos <- function(resultados_data, candidatos_data) {
resultados_data <- data.table(resultados_data)
candidatos_data <- data.table(candidatos_data)
data <- merge(resultados_data, candidatos_data,
by=c("numero_cand", "nome_municipio",
"descricao_cargo", "sigla_uf", "ano_eleicao",
"nome_candidato", "nome_urna_candidato", "sigla_partido",
"desc_sit_cand_tot", "desc_sit_candidato"))
data <- data %>%
distinct()
return(data)
}
# Recebe o ano e retorna o dataframe com as informações dos candidatos e votações de um ano.
process_candidatos_resultados  <- function(ano = 2016) {
resultados_df <- preprocess_resultados_por_ano(ano)
candidatos_df <- preprocess_candidatos_por_ano(ano)
resultados_candidatos_joined <- join_resultados_and_candidatos(resultados_df, candidatos_df)
write.csv2(resultados_candidatos_joined, paste0(here::here("data/preprocessed/candidatos/auxiliar/"), "candidatos_auxiliar_", ano, ".csv"), row.names = FALSE)
return(resultados_candidatos_joined)
}
df <- process_candidatos_resultados(2000)
write.csv(resultados_candidatos_joined, paste0(here::here("data/preprocessed/candidatos/auxiliar/"), "candidatos_auxiliar_", ano, ".csv"), row.names = FALSE)
# Recebe o ano e retorna o dataframe com as informações dos candidatos e votações de um ano.
process_candidatos_resultados  <- function(ano = 2016) {
resultados_df <- preprocess_resultados_por_ano(ano)
candidatos_df <- preprocess_candidatos_por_ano(ano)
resultados_candidatos_joined <- join_resultados_and_candidatos(resultados_df, candidatos_df)
write.csv(resultados_candidatos_joined, paste0(here::here("data/preprocessed/candidatos/auxiliar/"), "candidatos_auxiliar_", ano, ".csv"), row.names = FALSE)
return(resultados_candidatos_joined)
}
df <- process_candidatos_resultados(2000)
write.csv(df, paste0(here::here("data/preprocessed/candidatos/auxiliar/"), "candidatos_auxiliar_", ano, ".csv"), row.names = FALSE)
# Recebe o ano e retorna o dataframe com as informações dos candidatos e votações de um ano.
process_candidatos_resultados  <- function(ano = 2016) {
resultados_df <- preprocess_resultados_por_ano(ano)
candidatos_df <- preprocess_candidatos_por_ano(ano)
resultados_candidatos_joined <- join_resultados_and_candidatos(resultados_df, candidatos_df)
#write.csv(resultados_candidatos_joined, paste0(here::here("data/preprocessed/candidatos/auxiliar/"), "candidatos_auxiliar_", ano, ".csv"), row.names = FALSE)
return(resultados_candidatos_joined)
}
ano = 2002
df <- process_candidatos_resultados(ano)
write.csv(df, paste0(here::here("data/preprocessed/candidatos/auxiliar/"), "candidatos_auxiliar_", ano, ".csv"), row.names = FALSE)
write.csv(df, paste0(here::here("data/preprocessed/candidatos/auxiliar/"), "candidatos_auxiliar_", ano, ".csv"), row.names = FALSE)
ano = 2004
df <- process_candidatos_resultados(ano)
write.csv(df, paste0(here::here("data/preprocessed/candidatos/auxiliar/"), "candidatos_auxiliar_", ano, ".csv"), row.names = FALSE)
ano = 2006
df <- process_candidatos_resultados(ano)
data_2016 = readr::read_csv2(here::here("data/preprocessed/candidatos/auxiliar/candidatos_2016.csv"), local=readr::locale("br"))
data_2016 = readr::read_csv2(here::here("data/preprocessed/candidatos/auxiliar/candidatos_auxiliar_2016.csv"), local=readr::locale("br"))
View(data_2016)
data_2016 = preprocess(data_2016)
# Deleta colunas desnecessárias
dell_cols = function(df) {
return(df %>%
select(-c(X1,
nome_coligacao,
nome_urna_candidato,
composicao_legenda,
nome_partido,
descricao_cargo))
)
}
# Retorna um df contendo informações adicionais como total de candidatas femininas, total de candidatos masculinos,
# total de candidatas fantasmas femininas e total de candidatos masculinos fantasmas.
get_ghost_candidates = function(df) {
df %>% mutate(
total_candidate_fem = nrow(df %>% filter_get_candidates_fem),
total_candidate_masc = nrow(df %>% filter_get_candidates_masc),
total_ghosts_fem = nrow(df %>% filter_get_candidates_fem %>% filter_ghost_candidates),
total_ghosts_masc = nrow(df %>% filter_get_candidates_masc %>% filter_ghost_candidates)
)
}
# Seleciona colunas importantes
finish_clean = function(df) {
return(df %>%
select(ano_eleicao,
total_candidate_fem,
total_candidate_masc,
total_ghosts_fem,
total_ghosts_masc))
}
# Realiza o preprocessamento do dataframe
preprocess = function(df) {
return(df %>%
filter_desistentes %>%
dell_cols %>%
get_ghost_candidates %>%
finish_clean %>%
head(1))
}
data_2000 = readr::read_csv2(here::here("data/preprocessed/candidatos/auxiliar/candidatos_auxiliar_2000.csv"), local=readr::locale("br"))
data_2016 = readr::read_csv2(here::here("data/preprocessed/candidatos/auxiliar/candidatos_auxiliar_2016.csv"), local=readr::locale("br"))
data_2016 = preprocess(data_2016)
View(data_2016)
# Deleta colunas desnecessárias
dell_cols = function(df) {
return(df %>%
select(-c(nome_coligacao,
nome_urna_candidato,
composicao_legenda,
nome_partido,
descricao_cargo))
)
}
data_2016 = preprocess(data_2016)
# Deleta colunas desnecessárias
dell_cols = function(df) {
return(df %>%
select(-c(nome_urna_candidato,
composicao_legenda,
nome_partido,
descricao_cargo))
)
}
data_2016 = preprocess(data_2016)
# Deleta colunas desnecessárias
dell_cols = function(df) {
return(df %>%
select(-c(nome_urna_candidato,
nome_partido,
descricao_cargo))
)
}
data_2016 = preprocess(data_2016)
# Deleta colunas desnecessárias
dell_cols = function(df) {
return(df %>%
select(-c(nome_urna_candidato,
descricao_cargo))
)
}
data_2016 = preprocess(data_2016)
View(data_2016)
setwd("~/Área de Trabalho/AD2/Lab1/tutorial_r")
